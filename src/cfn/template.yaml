AWSTemplateFormatVersion: '2010-09-09'
Description: Amazon Transcribe News Media Analysis (uksb-1potrt4cg)
Transform: 'AWS::Serverless-2016-10-31'
Globals:
  Function:
    Environment:
      Variables:
        API_GATEWAY:
          'Fn::Sub': 'https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/PROD'
        COGNITO_IDENTITY_POOL:
          Ref: CognitoIdentityPool
        FROM_BUCKET: media-analysis-demo
        MAX_TASKS:
          Ref: MaxTasksCapacity
        REGION:
          Ref: 'AWS::Region'
        TO_BUCKET:
          Ref: WebUIBucket
  Api:
    Cors:
      AllowMethods: '''*'''
      AllowHeaders: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
      AllowOrigin: '''*'''
Parameters:
  MaxTasksCapacity:
    Type: Number
    Default: 10
Outputs:
  url:
    Value:
      'Fn::Sub': 'https://${WebUIBucket}.s3.amazonaws.com/index.html'
    Description: WebUI URL
Resources:
  ApiGatewayInvokeRole:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess'
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Federated:
                - cognito-identity.amazonaws.com
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
  CustomResourceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: MediaAnalysis-setup-S3-fc
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: 's3:*'
                Resource: '*'
        - PolicyName: MediaAnalysis-cloudwatch-logs
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: 'logs:*'
                Resource: 'arn:aws:logs:*:*:*'
  CognitoIdentityPool:
    Type: 'AWS::Cognito::IdentityPool'
    Properties:
      IdentityPoolName: MediaAnalysisIdentityPool
      AllowUnauthenticatedIdentities: true
  CognitoIdentityPoolRole:
    Type: 'AWS::Cognito::IdentityPoolRoleAttachment'
    Properties:
      IdentityPoolId:
        Ref: CognitoIdentityPool
      Roles:
        authenticated:
          'Fn::GetAtt':
            - ApiGatewayInvokeRole
            - Arn
        unauthenticated:
          'Fn::GetAtt':
            - ApiGatewayInvokeRole
            - Arn
  DbReadRole:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonDynamoDBReadOnlyAccess'
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - 'sts:AssumeRole'
  DbWriteRole:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess'
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - 'sts:AssumeRole'
  LambdaSetup:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: MediaAnalysisSetup
      Runtime: nodejs8.10
      Handler: index.handler
      Description: Custom Lambda resource for the Media Analysis Cloudformation Stack
      MemorySize: 128
      Timeout: 30
      Role:
        'Fn::GetAtt':
          - CustomResourceRole
          - Arn
      InlineCode: >-
        module.exports=function(e){var t={};function o(n){if(t[n])return
        t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return
        e[n].call(r.exports,r,r.exports,o),r.l=!0,r.exports}return
        o.m=e,o.c=t,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},o.r=function(e){"undefined"!=typeof
        Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return
        e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var
        n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof
        e)for(var r in e)o.d(n,r,function(t){return e[t]}.bind(null,r));return
        n},o.n=function(e){var t=e&&e.__esModule?function(){return
        e.default}:function(){return e};return
        o.d(t,"a",t),t},o.o=function(e,t){return
        Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=0)}([function(e,t,o){e.exports=o(1)},function(e,t,o){const
        n=o(2),r=o(3),s=o(6);t.handler=((e,t,o)=>{const{copyFiles:c,removeFiles:i,writeSettings:u}=s(new
        n.S3),{sendResponse:l}=r(e,t,o),a=e.RequestType;let
        d;"Delete"===a?(console.log("Deleting
        resources"),d=[i()]):(console.log("Creating
        resources"),d=[c(),u()]),Promise.all(d).then(()=>(console.log("All
        actions successfully performed"),l("SUCCESS",{Message:`Resources
        successfully
        ${a.toLowerCase()}d`}))).catch(e=>console.log(e)||l("FAILED"))})},function(e,t){e.exports=require("aws-sdk")},function(e,t,o){const
        n=o(4),r=o(5);e.exports=((e,t,o)=>{let s;const
        c=e=>(clearTimeout(s),e&&(console.log("There was an
        error"),console.log(e)),o(e)),i=(o,s)=>{const
        i=JSON.stringify({Status:o,Reason:`Details:
        ${t.logStreamName}`,PhysicalResourceId:t.logStreamName,StackId:e.StackId,RequestId:e.RequestId,LogicalResourceId:e.LogicalResourceId,Data:s}),u={url:e.ResponseURL,body:i,method:"PUT"};return
        console.log(`Making HTTP request to ${e.ResponseURL}: ${i}`),(e=>{const
        t=Object.assign({},r.parse(e.url),{method:e.method,headers:{"Content-Type":"","Content-Length":Buffer.byteLength(e.body)}});return
        new Promise((o,r)=>{const s=n.request(t,e=>{const
        t=[];if(200!==e.statusCode)return
        r(e);e.setEncoding("utf8"),e.on("data",e=>t.push(e)),e.on("error",r),e.on("end",()=>o(Buffer.concat(t)))});s.write(e.body),s.end()})})(u).then(e=>(console.log(e),c())).catch(e=>c(e))};return
        s=setTimeout(()=>i("FAILED").then(()=>o(new Error("Function timed
        out"))),t.getRemainingTimeInMillis()-1e3),{sendResponse:i}})},function(e,t){e.exports=require("https")},function(e,t){e.exports=require("url")},function(e,t){const{API_GATEWAY:o,COGNITO_IDENTITY_POOL:n,FROM_BUCKET:r,MAX_TASKS:s,REGION:c,TO_BUCKET:i}=process.env;e.exports=(e=>{const
        t=t=>e.listObjects(t).promise();return{copyFiles:()=>t({Bucket:r,Prefix:"static/"}).then(t=>Promise.all(t.Contents.map(t=>(t=>e.copyObject(t).promise())({ACL:"public-read",Bucket:i,CopySource:`${r}/${t.Key}`,Key:t.Key.slice("static/".length)})))),removeFiles:()=>t({Bucket:i}).then(t=>Promise.all(t.Contents.map(e=>e.Key).map(t=>(t=>e.deleteObject(t).promise())({Bucket:i,Key:t})))),writeSettings:()=>e.putObject({ACL:"public-read",Bucket:i,Key:"settings.js",Body:`window.mediaAnalysisSettings
        =
        ${JSON.stringify({apiGateway:o,cognitoIdentityPool:n,maxTasks:parseInt(s,10),region:c})};`}).promise()}})}]);
  RestApi:
    Type: 'AWS::Serverless::Api'
    Name: MediaAnalysisAPI
    Properties:
      StageName: PROD
      EndpointConfiguration: REGIONAL
      DefinitionBody:
        swagger: 2
        info:
          version: 1
          title: MediaAnalysisAPI
        basePath: /PROD
        paths:
          /poll:
            get:
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                credentials:
                  'Fn::GetAtt':
                    - DbReadRole
                    - Arn
                uri:
                  'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:dynamodb:action/Query'
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type'''
                    responseTemplates:
                      application/json: |
                        #set($inputRoot = $input.path('$'))
                        #set($c = 0)
                        {
                          "fragments": [
                            #foreach($elem in $inputRoot.Items) {
                              #set($c = $c + 1)
                              "timestamp": $elem.FragmentTimestamp.N,
                              "transcript": "$elem.Transcript.S",
                              "isPartial": $elem.IsPartial.BOOL
                            }#if($foreach.hasNext && $c < 1000),#end
                            #end
                          ]
                        }
                requestTemplates:
                  application/json:
                    'Fn::Sub': |
                      {
                        "TableName": "${TranscriptDynamoTable}",
                        "IndexName": "MediaAnalysisLSI",
                        "KeyConditionExpression": "MediaUrl = :murl AND FragmentTimestamp BETWEEN :from AND :to",
                        "ProjectionExpression": "FragmentTimestamp,Transcript,IsPartial",
                        "ExpressionAttributeValues": {
                          ":murl": {
                            "S": "$util.urlDecode($input.params().querystring.get('mediaUrl'))"
                          },
                          ":from": {
                            "N": "$input.params().querystring.get('from')"
                          },
                          ":to": {
                            "N": "$input.params().querystring.get('to')"
                          }
                        }
                      }
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws
              security:
                - sigv4: []
          /tasks:
            get:
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                credentials:
                  'Fn::GetAtt':
                    - DbReadRole
                    - Arn
                uri:
                  'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:dynamodb:action/Scan'
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type'''
                    responseTemplates:
                      application/json: |
                        #set($inputRoot = $input.path('$'))
                        {
                          "tasks": [
                            #foreach($elem in $inputRoot.Items) {
                              "mediaUrl": "$elem.MediaUrl.S",
                              "taskStatus": "$elem.TaskStatus.S",
                              "taskId": "$elem.TaskId.S"
                            }#if($foreach.hasNext),#end
                            #end
                          ]
                        }
                requestTemplates:
                  application/json:
                    'Fn::Sub': |
                      {
                        "TableName": "${TasksDynamoTable}",
                        "ProjectionExpression": "MediaUrl, TaskStatus, TaskId",
                        "ConsistentRead": true
                      }
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws
              security:
                - sigv4: []
          '/tasks/{mediaUrl}':
            get:
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                credentials:
                  'Fn::GetAtt':
                    - DbWriteRole
                    - Arn
                uri:
                  'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:dynamodb:action/Query'
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type'''
                    responseTemplates:
                      application/json: |
                        #set($inputRoot = $input.path('$'))
                        #foreach($elem in $inputRoot.Items) {
                          "mediaUrl": "$elem.MediaUrl.S",
                          "taskStatus": "$elem.TaskStatus.S",
                          "taskId": "$elem.TaskId.S"
                        }
                        #end
                requestTemplates:
                  application/json:
                    'Fn::Sub': |
                      {
                        "TableName": "${TasksDynamoTable}",
                        "KeyConditionExpression": "MediaUrl = :murl",
                        "ExpressionAttributeValues": {
                          ":murl": {
                            "S": "$util.urlDecode($input.params('mediaUrl'))"
                          }
                        },
                        "ConsistentRead": true
                      }
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws
              security:
                - sigv4: []
            delete:
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                credentials:
                  'Fn::GetAtt':
                    - DbWriteRole
                    - Arn
                uri:
                  'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:dynamodb:action/UpdateItem'
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type'''
                    responseTemplates:
                      application/json: |
                        {
                          "ok": true
                        }
                requestTemplates:
                  application/json:
                    'Fn::Sub': |
                      {
                        "TableName": "${TasksDynamoTable}",
                        "Key": {
                          "MediaUrl": {
                            "S": "$util.urlDecode($input.params('mediaUrl'))"
                          }
                        },
                        "UpdateExpression": "set TaskStatus = :newStatus",
                        "ExpressionAttributeValues": {
                          ":newStatus": {
                            "S": "TERMINATING"
                          }
                        }                      
                      }
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws
              security:
                - sigv4: []
            put:
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                credentials:
                  'Fn::GetAtt':
                    - DbWriteRole
                    - Arn
                uri:
                  'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:dynamodb:action/PutItem'
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type'''
                    responseTemplates:
                      application/json: |
                        {
                          "ok": true
                        }
                requestTemplates:
                  application/json:
                    'Fn::Sub': |
                      {
                        "TableName": "${TasksDynamoTable}",
                        "Item": {
                          "MediaUrl": {
                            "S": "$util.urlDecode($input.params('mediaUrl'))"
                          },
                          "TaskStatus": {
                            "S": "WAITING"
                          }
                        }
                      }
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws
              security:
                - sigv4: []
        securityDefinitions:
          sigv4:
            type: apiKey
            name: Authorization
            in: header
            x-amazon-apigateway-authtype: awsSigv4
  TasksDynamoTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: MediaAnalysisTasks
      AttributeDefinitions:
        - AttributeName: MediaUrl
          AttributeType: S
      KeySchema:
        - AttributeName: MediaUrl
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
  TranscriptDynamoTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: MediaAnalysisTranscript
      AttributeDefinitions:
        - AttributeName: MediaUrl
          AttributeType: S
        - AttributeName: ResultId
          AttributeType: S
        - AttributeName: FragmentTimestamp
          AttributeType: 'N'
      KeySchema:
        - AttributeName: MediaUrl
          KeyType: HASH
        - AttributeName: ResultId
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      LocalSecondaryIndexes:
        - IndexName: MediaAnalysisLSI
          KeySchema:
            - AttributeName: MediaUrl
              KeyType: HASH
            - AttributeName: FragmentTimestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
  SetupWebUI:
    Type: 'Custom::Setup'
    Properties:
      ServiceToken:
        'Fn::GetAtt':
          - LambdaSetup
          - Arn
      Region:
        Ref: 'AWS::Region'
  WebUIBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
            AllowedOrigins:
              - '*'
            Id: MediaAnalysisCorsRule
            MaxAge: 3600
